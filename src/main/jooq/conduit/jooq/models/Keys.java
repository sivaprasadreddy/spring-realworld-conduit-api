/*
 * This file is generated by jOOQ.
 */
package conduit.jooq.models;


import conduit.jooq.models.tables.ArticleFavorite;
import conduit.jooq.models.tables.ArticleTag;
import conduit.jooq.models.tables.Articles;
import conduit.jooq.models.tables.Comments;
import conduit.jooq.models.tables.Tags;
import conduit.jooq.models.tables.UserFollower;
import conduit.jooq.models.tables.Users;
import conduit.jooq.models.tables.records.ArticleFavoriteRecord;
import conduit.jooq.models.tables.records.ArticleTagRecord;
import conduit.jooq.models.tables.records.ArticlesRecord;
import conduit.jooq.models.tables.records.CommentsRecord;
import conduit.jooq.models.tables.records.TagsRecord;
import conduit.jooq.models.tables.records.UserFollowerRecord;
import conduit.jooq.models.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ArticleFavoriteRecord> ARTICLE_FAVORITE_PKEY = Internal.createUniqueKey(ArticleFavorite.ARTICLE_FAVORITE, DSL.name("article_favorite_pkey"), new TableField[] { ArticleFavorite.ARTICLE_FAVORITE.ARTICLE_ID, ArticleFavorite.ARTICLE_FAVORITE.USER_ID }, true);
    public static final UniqueKey<ArticleTagRecord> ARTICLE_TAG_PKEY = Internal.createUniqueKey(ArticleTag.ARTICLE_TAG, DSL.name("article_tag_pkey"), new TableField[] { ArticleTag.ARTICLE_TAG.ARTICLE_ID, ArticleTag.ARTICLE_TAG.TAG_ID }, true);
    public static final UniqueKey<ArticlesRecord> ARTICLES_PKEY = Internal.createUniqueKey(Articles.ARTICLES, DSL.name("articles_pkey"), new TableField[] { Articles.ARTICLES.ID }, true);
    public static final UniqueKey<ArticlesRecord> UK_ARTICLES_SLUG = Internal.createUniqueKey(Articles.ARTICLES, DSL.name("uk_articles_slug"), new TableField[] { Articles.ARTICLES.SLUG }, true);
    public static final UniqueKey<ArticlesRecord> UK_ARTICLES_TITLE = Internal.createUniqueKey(Articles.ARTICLES, DSL.name("uk_articles_title"), new TableField[] { Articles.ARTICLES.TITLE }, true);
    public static final UniqueKey<CommentsRecord> COMMENTS_PKEY = Internal.createUniqueKey(Comments.COMMENTS, DSL.name("comments_pkey"), new TableField[] { Comments.COMMENTS.ID }, true);
    public static final UniqueKey<TagsRecord> TAGS_PKEY = Internal.createUniqueKey(Tags.TAGS, DSL.name("tags_pkey"), new TableField[] { Tags.TAGS.ID }, true);
    public static final UniqueKey<TagsRecord> UK_TAGS_NAME = Internal.createUniqueKey(Tags.TAGS, DSL.name("uk_tags_name"), new TableField[] { Tags.TAGS.NAME }, true);
    public static final UniqueKey<UserFollowerRecord> USER_FOLLOWER_PKEY = Internal.createUniqueKey(UserFollower.USER_FOLLOWER, DSL.name("user_follower_pkey"), new TableField[] { UserFollower.USER_FOLLOWER.FROM_ID, UserFollower.USER_FOLLOWER.TO_ID }, true);
    public static final UniqueKey<UsersRecord> UK_USERS_EMAIL = Internal.createUniqueKey(Users.USERS, DSL.name("uk_users_email"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> UK_USERS_USERNAME = Internal.createUniqueKey(Users.USERS, DSL.name("uk_users_username"), new TableField[] { Users.USERS.USERNAME }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ArticleFavoriteRecord, ArticlesRecord> ARTICLE_FAVORITE__FK_ARTICLE_FAVORITE_ARTICLE_ID = Internal.createForeignKey(ArticleFavorite.ARTICLE_FAVORITE, DSL.name("fk_article_favorite_article_id"), new TableField[] { ArticleFavorite.ARTICLE_FAVORITE.ARTICLE_ID }, Keys.ARTICLES_PKEY, new TableField[] { Articles.ARTICLES.ID }, true);
    public static final ForeignKey<ArticleFavoriteRecord, UsersRecord> ARTICLE_FAVORITE__FK_ARTICLE_FAVORITE_USER_ID = Internal.createForeignKey(ArticleFavorite.ARTICLE_FAVORITE, DSL.name("fk_article_favorite_user_id"), new TableField[] { ArticleFavorite.ARTICLE_FAVORITE.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<ArticleTagRecord, ArticlesRecord> ARTICLE_TAG__FK_ARTICLE_TAG_ARTICLE_ID = Internal.createForeignKey(ArticleTag.ARTICLE_TAG, DSL.name("fk_article_tag_article_id"), new TableField[] { ArticleTag.ARTICLE_TAG.ARTICLE_ID }, Keys.ARTICLES_PKEY, new TableField[] { Articles.ARTICLES.ID }, true);
    public static final ForeignKey<ArticleTagRecord, TagsRecord> ARTICLE_TAG__FK_ARTICLE_TAG_TAG_ID = Internal.createForeignKey(ArticleTag.ARTICLE_TAG, DSL.name("fk_article_tag_tag_id"), new TableField[] { ArticleTag.ARTICLE_TAG.TAG_ID }, Keys.TAGS_PKEY, new TableField[] { Tags.TAGS.ID }, true);
    public static final ForeignKey<ArticlesRecord, UsersRecord> ARTICLES__FK_ARTICLES_AUTHOR = Internal.createForeignKey(Articles.ARTICLES, DSL.name("fk_articles_author"), new TableField[] { Articles.ARTICLES.AUTHOR_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<CommentsRecord, ArticlesRecord> COMMENTS__FK_COMMENTS_ARTICLE_ID = Internal.createForeignKey(Comments.COMMENTS, DSL.name("fk_comments_article_id"), new TableField[] { Comments.COMMENTS.ARTICLE_ID }, Keys.ARTICLES_PKEY, new TableField[] { Articles.ARTICLES.ID }, true);
    public static final ForeignKey<CommentsRecord, UsersRecord> COMMENTS__FK_COMMENTS_AUTHOR_ID = Internal.createForeignKey(Comments.COMMENTS, DSL.name("fk_comments_author_id"), new TableField[] { Comments.COMMENTS.AUTHOR_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<UserFollowerRecord, UsersRecord> USER_FOLLOWER__USER_FOLLOWER_FROM_ID_FKEY = Internal.createForeignKey(UserFollower.USER_FOLLOWER, DSL.name("user_follower_from_id_fkey"), new TableField[] { UserFollower.USER_FOLLOWER.FROM_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<UserFollowerRecord, UsersRecord> USER_FOLLOWER__USER_FOLLOWER_TO_ID_FKEY = Internal.createForeignKey(UserFollower.USER_FOLLOWER, DSL.name("user_follower_to_id_fkey"), new TableField[] { UserFollower.USER_FOLLOWER.TO_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
}
