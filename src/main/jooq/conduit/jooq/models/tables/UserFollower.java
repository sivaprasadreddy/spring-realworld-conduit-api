/*
 * This file is generated by jOOQ.
 */
package conduit.jooq.models.tables;


import conduit.jooq.models.Keys;
import conduit.jooq.models.Public;
import conduit.jooq.models.tables.records.UserFollowerRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFollower extends TableImpl<UserFollowerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_follower</code>
     */
    public static final UserFollower USER_FOLLOWER = new UserFollower();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserFollowerRecord> getRecordType() {
        return UserFollowerRecord.class;
    }

    /**
     * The column <code>public.user_follower.from_id</code>.
     */
    public final TableField<UserFollowerRecord, Long> FROM_ID = createField(DSL.name("from_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_follower.to_id</code>.
     */
    public final TableField<UserFollowerRecord, Long> TO_ID = createField(DSL.name("to_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private UserFollower(Name alias, Table<UserFollowerRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserFollower(Name alias, Table<UserFollowerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_follower</code> table reference
     */
    public UserFollower(String alias) {
        this(DSL.name(alias), USER_FOLLOWER);
    }

    /**
     * Create an aliased <code>public.user_follower</code> table reference
     */
    public UserFollower(Name alias) {
        this(alias, USER_FOLLOWER);
    }

    /**
     * Create a <code>public.user_follower</code> table reference
     */
    public UserFollower() {
        this(DSL.name("user_follower"), null);
    }

    public <O extends Record> UserFollower(Table<O> child, ForeignKey<O, UserFollowerRecord> key) {
        super(child, key, USER_FOLLOWER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserFollowerRecord> getPrimaryKey() {
        return Keys.USER_FOLLOWER_PKEY;
    }

    @Override
    public List<ForeignKey<UserFollowerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_FOLLOWER__USER_FOLLOWER_FROM_ID_FKEY, Keys.USER_FOLLOWER__USER_FOLLOWER_TO_ID_FKEY);
    }

    private transient Users _userFollowerFromIdFkey;
    private transient Users _userFollowerToIdFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>user_follower_from_id_fkey</code> key.
     */
    public Users userFollowerFromIdFkey() {
        if (_userFollowerFromIdFkey == null)
            _userFollowerFromIdFkey = new Users(this, Keys.USER_FOLLOWER__USER_FOLLOWER_FROM_ID_FKEY);

        return _userFollowerFromIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>user_follower_to_id_fkey</code> key.
     */
    public Users userFollowerToIdFkey() {
        if (_userFollowerToIdFkey == null)
            _userFollowerToIdFkey = new Users(this, Keys.USER_FOLLOWER__USER_FOLLOWER_TO_ID_FKEY);

        return _userFollowerToIdFkey;
    }

    @Override
    public UserFollower as(String alias) {
        return new UserFollower(DSL.name(alias), this);
    }

    @Override
    public UserFollower as(Name alias) {
        return new UserFollower(alias, this);
    }

    @Override
    public UserFollower as(Table<?> alias) {
        return new UserFollower(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFollower rename(String name) {
        return new UserFollower(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFollower rename(Name name) {
        return new UserFollower(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFollower rename(Table<?> name) {
        return new UserFollower(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
